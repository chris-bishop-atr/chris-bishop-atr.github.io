<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://christopher-bishop.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://christopher-bishop.com/" rel="alternate" type="text/html" /><updated>2022-06-01T11:42:20+00:00</updated><id>https://christopher-bishop.com/feed.xml</id><title type="html">Chris Bishop - Software Engineer</title><subtitle>My name is Chris Bishop. I am a Cloud Software Engineer with 14+ years of success transforming challenging business initiatives into innovative, yet sustaining, technology solutions. I have a demonstrated history of expertise leveraging emerging technology to manage multiple production workloads as a key member of the Core Engineering Team for an industry leading SaaS, Data, and Analytics provider.</subtitle><author><name>Chris Bishop</name><email>cjbishop1986@gmail.com</email></author><entry><title type="html">Assume the Role™ - what the heck does that mean?</title><link href="https://christopher-bishop.com/assumetherole/originstory/genesis/2021/12/11/assume-the-role-genesis-story/" rel="alternate" type="text/html" title="Assume the Role™ - what the heck does that mean?" /><published>2021-12-11T02:09:55+00:00</published><updated>2021-12-11T02:09:55+00:00</updated><id>https://christopher-bishop.com/assumetherole/originstory/genesis/2021/12/11/assume-the-role-genesis-story</id><content type="html" xml:base="https://christopher-bishop.com/assumetherole/originstory/genesis/2021/12/11/assume-the-role-genesis-story/">&lt;p&gt;&lt;img src=&quot;/assets/logo-img-text-color-stroked.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;assume-the-role---what-the-heck-does-that-mean&quot;&gt;Assume the Role™ - what the heck does that mean?&lt;/h3&gt;

&lt;p&gt;I can imagine for users coming across my personal blog and professional portfolio site for the first time that one of their first questions for me would be: “Assume the Role™ - what the heck does that mean?”&lt;/p&gt;

&lt;p&gt;The short answer: Assume the Role™ (ATR™ for we lovers of all things &lt;em&gt;acronym&lt;/em&gt;) is my attempt to form my own personal brand, and therefore the name of my blog.&lt;/p&gt;

&lt;h3 id=&quot;assume-the-role---origin-story&quot;&gt;Assume the Role™ - Origin Story&lt;/h3&gt;

&lt;p&gt;The logical very next question they might have would be: “Ahh ok you’re launching your own brand, I can respect that! BUT - you still haven’t told me what the heck Assume the Role™ specifically means! Why oh why did you choose Assume the Role™?!”&lt;/p&gt;

&lt;p&gt;So - now for the long answer. I spent a lot of nights and weekends “trying on” more potential names for my own brand that I have forgotten more of them than I can recall.&lt;/p&gt;

&lt;p&gt;Given my 15 year career as an enterprise cloud data and software engineer who is used to either having full conversations with colleagues in “acronym” and assigning source files, variable names, tables, columns, indexes, etc with long boring extremely literal names like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPROC_GET_CUSTOMER_DATA_BY_ORDER_ID&lt;/code&gt; - you can surely imagine how bad some of my initial ideas were.&lt;/p&gt;

&lt;p&gt;After many attempts and seeking input from friends, family, and of course &lt;a href=&quot;https://lookup.icann.org/&quot;&gt;ICANN Lookup&lt;/a&gt; to be sure I could register the domain name, I arrived at Assume the Role™&lt;/p&gt;

&lt;h3 id=&quot;assume-the-role---deeper-meaning&quot;&gt;Assume the Role™ - Deeper Meaning&lt;/h3&gt;

&lt;p&gt;For my fellow Cloud Engineers with &lt;a href=&quot;https://aws.amazon.com/devops/&quot;&gt;AWS (Amazon Web Services) DevOps&lt;/a&gt; experience - the name might not be all too foreign.&lt;/p&gt;

&lt;p&gt;When following best practice for &lt;a href=&quot;https://en.wikipedia.org/wiki/Role-based_access_control&quot;&gt;RBAC (role based access control)&lt;/a&gt; using &lt;a href=&quot;https://aws.amazon.com/iam/&quot;&gt;AWS’s IAM (Identity and Access Management) Service&lt;/a&gt; - engineers define policies which are assigned to roles, and individual users or groups are then assigned roles which they can then &lt;strong&gt;“assume”&lt;/strong&gt; and be issued temporary credentials through the &lt;a href=&quot;https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html&quot;&gt;AWS STS (Security Token Service)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I drew my inspiration from that concept - but that’s not the whole story. I wanted Assume the Role™ to have deeper meaning.&lt;/p&gt;

&lt;p&gt;For me, Assume the Role™ is a play on words and knod to &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; (which I’ve built my career on) - but its true meaning is to represent the need for Enterprise DevOps Engineers like myself to “wear many hats”, never stop learning, and to steal a term from our honorable &lt;a href=&quot;https://www.marines.com/about-the-marine-corps/who-are-the-marines/purpose.html&quot;&gt;US Marine Corps Purpose&lt;/a&gt;: &lt;strong&gt;“IAO (improvise adapt overcome)”&lt;/strong&gt; by pivoting on a moments notice, “answer the call” whenever needed, &lt;strong&gt;“Assume the Role™“&lt;/strong&gt;, accepting nothing less than success when transforming challenging business initiatives into innovative, yet sustaining, technology solutions on a daily basis.&lt;/p&gt;

&lt;p&gt;Pretty cool, eh? I designed the logos myself - and while I know I’m no graphic artist - I feel all the elements are inclusive of the genesis and culture of what Assume the Role™ means to me!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/logo-img-notext-color-stroked.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Sneak Preview: Come back soon for a companion to this post where I share my experience creating the Assume the Role™ Logo Mark and why I chose the elements I did!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that you know what Assume the Role™ means to me - I hope it inspires you to forge your own definition of what Assume the Role™ means to you - and come back from time to time to contribute to the community I hope to build here!&lt;/p&gt;

&lt;p&gt;Cheers Mates!&lt;/p&gt;</content><author><name>Chris Bishop</name><email>cjbishop1986@gmail.com</email></author><category term="assumetherole" /><category term="originstory" /><category term="genesis" /><summary type="html">Assume the Role™ - what the heck does that mean? I can imagine for users coming across my personal blog and professional portfolio site for the first time that one of their first questions for me would be: “Assume the Role™ - what the heck does that mean?” The short answer: Assume the Role™ (ATR™ for we lovers of all things acronym) is my attempt to form my own personal brand, and therefore the name of my blog. Assume the Role™ - Origin Story The logical very next question they might have would be: “Ahh ok you’re launching your own brand, I can respect that! BUT - you still haven’t told me what the heck Assume the Role™ specifically means! Why oh why did you choose Assume the Role™?!” So - now for the long answer. I spent a lot of nights and weekends “trying on” more potential names for my own brand that I have forgotten more of them than I can recall. Given my 15 year career as an enterprise cloud data and software engineer who is used to either having full conversations with colleagues in “acronym” and assigning source files, variable names, tables, columns, indexes, etc with long boring extremely literal names like SPROC_GET_CUSTOMER_DATA_BY_ORDER_ID - you can surely imagine how bad some of my initial ideas were. After many attempts and seeking input from friends, family, and of course ICANN Lookup to be sure I could register the domain name, I arrived at Assume the Role™ Assume the Role™ - Deeper Meaning For my fellow Cloud Engineers with AWS (Amazon Web Services) DevOps experience - the name might not be all too foreign. When following best practice for RBAC (role based access control) using AWS’s IAM (Identity and Access Management) Service - engineers define policies which are assigned to roles, and individual users or groups are then assigned roles which they can then “assume” and be issued temporary credentials through the AWS STS (Security Token Service). I drew my inspiration from that concept - but that’s not the whole story. I wanted Assume the Role™ to have deeper meaning. For me, Assume the Role™ is a play on words and knod to AWS (which I’ve built my career on) - but its true meaning is to represent the need for Enterprise DevOps Engineers like myself to “wear many hats”, never stop learning, and to steal a term from our honorable US Marine Corps Purpose: “IAO (improvise adapt overcome)” by pivoting on a moments notice, “answer the call” whenever needed, “Assume the Role™“, accepting nothing less than success when transforming challenging business initiatives into innovative, yet sustaining, technology solutions on a daily basis. Pretty cool, eh? I designed the logos myself - and while I know I’m no graphic artist - I feel all the elements are inclusive of the genesis and culture of what Assume the Role™ means to me! (Sneak Preview: Come back soon for a companion to this post where I share my experience creating the Assume the Role™ Logo Mark and why I chose the elements I did!) Now that you know what Assume the Role™ means to me - I hope it inspires you to forge your own definition of what Assume the Role™ means to you - and come back from time to time to contribute to the community I hope to build here! Cheers Mates!</summary></entry><entry><title type="html">Jekyll Continuous Integration and Delivery Pipeline with Github Actions - Build on Push Workflow</title><link href="https://christopher-bishop.com/jekyll/github/actions/workflow/continuous-integration/pipeline/2021/12/05/git-actions-jekyll-ci-workflow/" rel="alternate" type="text/html" title="Jekyll Continuous Integration and Delivery Pipeline with Github Actions - Build on Push Workflow" /><published>2021-12-05T00:28:32+00:00</published><updated>2021-12-05T00:28:32+00:00</updated><id>https://christopher-bishop.com/jekyll/github/actions/workflow/continuous-integration/pipeline/2021/12/05/git-actions-jekyll-ci-workflow</id><content type="html" xml:base="https://christopher-bishop.com/jekyll/github/actions/workflow/continuous-integration/pipeline/2021/12/05/git-actions-jekyll-ci-workflow/">&lt;p&gt;&lt;img src=&quot;/assets/git_actions_cicd.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fully-automated-jekyll-ssg-cicd-pipeline-with-github-actions---build-on-push-workflow&quot;&gt;Fully Automated Jekyll SSG CI/CD Pipeline with Github Actions - Build on Push Workflow&lt;/h3&gt;

&lt;p&gt;Since I am just getting started on my new blog and portfolio home on the web hosted fully free of charge via &lt;a href=&quot;https://docs.github.com/en/pages/getting-started-with-github-pages&quot;&gt;Github Pages&lt;/a&gt;, one of the very first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#TODO&lt;/code&gt; items on my list was configuring a fully automated &lt;strong&gt;build on push&lt;/strong&gt; continuous integration and delivery pipeline workflow.&lt;/p&gt;

&lt;p&gt;Why? One of the main reasons after almost 15 years in the business I am only just now getting around to kicking out my own professional portfolio and blog is simply a matter of not having the free time away from work to devote to initial build out. I have tried to commit to such projects with varying degrees of success over my 15 years, and never seemed to hit paydirt. So - when I decided to endeavor again, priority number one was that every aspect of my development lifecycle would need to be as simplified as possible. How might I achieve such a &lt;a href=&quot;https://www.google.com/search?q=fabled%20creature&amp;amp;tbm=isch&amp;amp;tbs=il%3Acl&quot;&gt;“fabled creature”&lt;/a&gt;? Through the use of SSG (Static Site Generation) to minimize the time I need to spend developing content combined with a trustworthy and easy to implement continuous integration and delivery process, of course!&lt;/p&gt;

&lt;p&gt;I was absolutely amazed at how simple &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt; has made that process for the Development Community nowadays, especially considering the amount of time I spend troubleshooting issues with our Jenkins CI/CD servers every week at my day job! Oh, and did I mention that for non enterprise accounts using public repositories, they offer users what I consider to be a very signifficant amount of free tier time each month, to boot? Take a look at &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits&quot;&gt;Github Actions - Usage Limits&lt;/a&gt; for additional information on plan quotas, etc.&lt;/p&gt;

&lt;p&gt;I wanted to share my experience here in hopes that it may help some other member of the Dev Community some day to finally invest the time in their own career development without the need to burn those precious few off-peak hours we are “allowed” away from our day jobs each week.&lt;/p&gt;

&lt;p&gt;With that, lets get down to the nuts and bolts!&lt;/p&gt;

&lt;p&gt;First, this entire website, including this very blog post, are built entirely on top of an awesome SSG (Static Site Generator) framework that is natively supported by &lt;a href=&quot;https://docs.github.com/en/pages/getting-started-with-github-pages&quot;&gt;Github Pages&lt;/a&gt; called &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Diving deep in to SSGs in general is out of scope for this blog post, however for those who may not be familiar with SSGs - you can learn more about them at the Jekyll website noted above, or check out this great article written by &lt;a href=&quot;https://www.cloudflare.com/learning/performance/static-site-generator/&quot;&gt;Cloudflare on the subject - What is a static site generator?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After simplifying my life with regard to producing my online content to share with the masses using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; - the next step in making my life as simple as possible was build and deployment automation.&lt;/p&gt;

&lt;p&gt;To accomplish that, all I had to do was create a very simple &lt;a href=&quot;https://lab.github.com/githubtraining/github-actions:-continuous-integration&quot;&gt;Github Actions: Continuous Integration&lt;/a&gt; Workflow template and include it in my website’s Git Repo!&lt;/p&gt;

&lt;p&gt;Here is how simple automating build on push and publish to the web can be with Github Actions and Jekyll:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Author: Chris Bishop&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Created: 05Dec2021&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Purpose: Automated CI / CD Pipeline to Build, Scan (TODO), &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     and Publish Jekyll Assets from main branch to gh-pages branch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# See: https://github.com/marketplace/actions/jekyll-actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-ci-build-and-publish-workflow&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Triggers the workflow on push or pull request events but only for the main branch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This workflow contains a single job called &quot;build&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    
      &lt;span class=&quot;c1&quot;&gt;# Checks-out your repository/branch under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# See: https://github.com/marketplace/actions/checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;# Use GitHub Actions' cache to shorten build times and decrease load on servers&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# See: https://github.com/marketplace/actions/cache&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor/bundle&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$\{\{ runner.os \}\}-gems-$\{\{ hashFiles('**/Gemfile') \}\}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;restore-keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$\{\{ runner.os \}\}-gems-&lt;/span&gt;
            
      &lt;span class=&quot;c1&quot;&gt;# Use the 3rd Party Jekyll Managed jekyll-action to build Jekyll sources checked out from main&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#     then publish resulting SSG outfiles to the gh-pages branch which should trigger a new env&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#     deployment to https://chris-bishop.github.io/&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# See: https://github.com/marketplace/actions/jekyll-actions&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;helaili/jekyll-action@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# NOTE - secrets.GITHUB_TOKEN is like an AWS Default KMS Key managed by Github, NOT a user managed PAT!&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Where the build job should look for source files and templates. Defaults to repo root. &lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Set the jekyll_src value to a subdirectory below, as desired&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;jekyll_src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Branch to publish the resulting SSG output files to.&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;target_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gh-pages'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://github.com/chris-bishop/chris-bishop.github.io/blob/main/.github/workflows/jekyll-ci-build-and-publish-workflow.yml&quot;&gt;jekyll-ci-build-and-publish-workflow.yml&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have added lots of comments explaining what each step of the workflow job is actually doing, so I will save you some bandwidth and not go through each and every step.&lt;/p&gt;

&lt;p&gt;That’s it though! I now have a fully automated SSG + CI/CD “headless” content development and management platform which allows me to spend most of my valuable time creating rather than troubleshooting!&lt;/p&gt;

&lt;p&gt;To see the full source code that runs this very website, here is the source repository: &lt;a href=&quot;https://github.com/chris-bishop/chris-bishop.github.io&quot;&gt;Github - chris-bishop/chris-bishop.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a public repository - so feel free to reach out to me on the discussion boards there if you have any further questions / thoughts!&lt;/p&gt;

&lt;p&gt;Cheers Mates!&lt;/p&gt;</content><author><name>Chris Bishop</name><email>cjbishop1986@gmail.com</email></author><category term="jekyll" /><category term="github" /><category term="actions" /><category term="workflow" /><category term="continuous-integration" /><category term="pipeline" /><summary type="html">Fully Automated Jekyll SSG CI/CD Pipeline with Github Actions - Build on Push Workflow Since I am just getting started on my new blog and portfolio home on the web hosted fully free of charge via Github Pages, one of the very first #TODO items on my list was configuring a fully automated build on push continuous integration and delivery pipeline workflow. Why? One of the main reasons after almost 15 years in the business I am only just now getting around to kicking out my own professional portfolio and blog is simply a matter of not having the free time away from work to devote to initial build out. I have tried to commit to such projects with varying degrees of success over my 15 years, and never seemed to hit paydirt. So - when I decided to endeavor again, priority number one was that every aspect of my development lifecycle would need to be as simplified as possible. How might I achieve such a “fabled creature”? Through the use of SSG (Static Site Generation) to minimize the time I need to spend developing content combined with a trustworthy and easy to implement continuous integration and delivery process, of course! I was absolutely amazed at how simple Github has made that process for the Development Community nowadays, especially considering the amount of time I spend troubleshooting issues with our Jenkins CI/CD servers every week at my day job! Oh, and did I mention that for non enterprise accounts using public repositories, they offer users what I consider to be a very signifficant amount of free tier time each month, to boot? Take a look at Github Actions - Usage Limits for additional information on plan quotas, etc. I wanted to share my experience here in hopes that it may help some other member of the Dev Community some day to finally invest the time in their own career development without the need to burn those precious few off-peak hours we are “allowed” away from our day jobs each week. With that, lets get down to the nuts and bolts! First, this entire website, including this very blog post, are built entirely on top of an awesome SSG (Static Site Generator) framework that is natively supported by Github Pages called Jekyll. Diving deep in to SSGs in general is out of scope for this blog post, however for those who may not be familiar with SSGs - you can learn more about them at the Jekyll website noted above, or check out this great article written by Cloudflare on the subject - What is a static site generator?. After simplifying my life with regard to producing my online content to share with the masses using Jekyll - the next step in making my life as simple as possible was build and deployment automation. To accomplish that, all I had to do was create a very simple Github Actions: Continuous Integration Workflow template and include it in my website’s Git Repo! Here is how simple automating build on push and publish to the web can be with Github Actions and Jekyll: # Author: Chris Bishop # Created: 05Dec2021 # Purpose: Automated CI / CD Pipeline to Build, Scan (TODO), # and Publish Jekyll Assets from main branch to gh-pages branch # See: https://github.com/marketplace/actions/jekyll-actions name: jekyll-ci-build-and-publish-workflow # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the main branch push: branches: [ main ] pull_request: branches: [ main ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called &quot;build&quot; build: # The type of runner that the job will run on runs-on: ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository/branch under $GITHUB_WORKSPACE, so your job can access it # See: https://github.com/marketplace/actions/checkout - uses: actions/checkout@v2 # Use GitHub Actions' cache to shorten build times and decrease load on servers # See: https://github.com/marketplace/actions/cache - uses: actions/cache@v2 with: path: vendor/bundle key: $\{\{ runner.os \}\}-gems-$\{\{ hashFiles('**/Gemfile') \}\} restore-keys: | $\{\{ runner.os \}\}-gems- # Use the 3rd Party Jekyll Managed jekyll-action to build Jekyll sources checked out from main # then publish resulting SSG outfiles to the gh-pages branch which should trigger a new env # deployment to https://chris-bishop.github.io/ # See: https://github.com/marketplace/actions/jekyll-actions - uses: helaili/jekyll-action@v2 with: # NOTE - secrets.GITHUB_TOKEN is like an AWS Default KMS Key managed by Github, NOT a user managed PAT! token: $ # Where the build job should look for source files and templates. Defaults to repo root. # Set the jekyll_src value to a subdirectory below, as desired jekyll_src: '' # Branch to publish the resulting SSG output files to. target_branch: 'gh-pages' Source: jekyll-ci-build-and-publish-workflow.yml I have added lots of comments explaining what each step of the workflow job is actually doing, so I will save you some bandwidth and not go through each and every step. That’s it though! I now have a fully automated SSG + CI/CD “headless” content development and management platform which allows me to spend most of my valuable time creating rather than troubleshooting! To see the full source code that runs this very website, here is the source repository: Github - chris-bishop/chris-bishop.github.io It’s a public repository - so feel free to reach out to me on the discussion boards there if you have any further questions / thoughts! Cheers Mates!</summary></entry><entry><title type="html">Work in Progress! Welcome!</title><link href="https://christopher-bishop.com/jekyll/update/2021/12/04/work-in-progress/" rel="alternate" type="text/html" title="Work in Progress! Welcome!" /><published>2021-12-04T06:56:48+00:00</published><updated>2021-12-04T06:56:48+00:00</updated><id>https://christopher-bishop.com/jekyll/update/2021/12/04/work-in-progress</id><content type="html" xml:base="https://christopher-bishop.com/jekyll/update/2021/12/04/work-in-progress/">&lt;p&gt;&lt;img src=&quot;/assets/my-octocat.png&quot; alt=&quot;Chris Bishop - Octocat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My Octocat would like to say: “Welcome to Chris Bishop’s Blog and Professional Portfolio!”&lt;/p&gt;

&lt;p&gt;Please excuse our appearance while we get things up and running via &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check back soon or subscribe to my RSS feed using the Subscribe link in the footer to see all of the wonderful content I hope to find time to share soon!&lt;/p&gt;

&lt;p&gt;Meanwhile, also head on over to my LinkedIn and Github profile pages using the social links in the footer to see what I have going on there too!&lt;/p&gt;</content><author><name>Chris Bishop</name><email>cjbishop1986@gmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html">My Octocat would like to say: “Welcome to Chris Bishop’s Blog and Professional Portfolio!” Please excuse our appearance while we get things up and running via Jekyll and Github Pages Check back soon or subscribe to my RSS feed using the Subscribe link in the footer to see all of the wonderful content I hope to find time to share soon! Meanwhile, also head on over to my LinkedIn and Github profile pages using the social links in the footer to see what I have going on there too!</summary></entry></feed>